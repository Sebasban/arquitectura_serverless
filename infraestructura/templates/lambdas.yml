AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Crea dos Lambdas para el microservicio de eventos.

Parameters:
  Environment:
    Type: String
    Description: "Texto adicional para el nombre del bucket (ej: dev, qc, pdn)"
    Default: "dev"
    AllowedValues: ["dev", "qc", "pdn"]

  EventTableName:
    Type: String
    Description: "Nombre de la tabla DynamoDB (ej: EventTable)"
    Default: "EventTable"

Resources:

  ## ROLE PARA EventLambda ##
  EventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaEventRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EventLambdaModificationPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Logging
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/EventLambda:*"

              # DynamoDB Access
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DescribeTable'
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EventTableName}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EventTableName}/index/*"

              # EventBridge Scheduler
              - Effect: 'Allow'
                Action:
                  - 'scheduler:CreateSchedule'
                  - 'scheduler:DeleteSchedule'
                  - 'scheduler:GetSchedule'
                  - 'scheduler:ListSchedules'
                  - 'scheduler:UpdateSchedule'
                Resource: '*'

              # Permiso para pasar rol
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource: !GetAtt EventBridgeInvokeLambdaRole.Arn


  ## LOG GROUP PARA EventLambda ##
  EventLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/EventLambda"
      RetentionInDays: 30

  ## LAMBDA PRINCIPAL ##
  EventLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: EventLambdaLogGroup
    Properties:
      FunctionName: 'EventLambda'
      Handler: 'events_lambda.lambda_handler'
      Runtime: python3.12
      Code:
        S3Bucket: !Sub "lambda-code-${AWS::AccountId}-${AWS::Region}-${Environment}"
        S3Key: "scripts_aplication/events_lambda.py.zip"
      MemorySize: 128
      Timeout: 20
      Role: !GetAtt EventLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTableName
          REGION: !Ref 'AWS::Region'
          LOG_LEVEL: "INFO"

  ## ROLE PARA UPDATE LAMBDA ##
  UpdateEventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaUpdateEventRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ## LOG GROUP PARA UPDATE LAMBDA ##
  UpdateEventLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/UpdateLambda"
      RetentionInDays: 30

  ## LAMBDA PARA ACTUALIZACIÓN DE EVENTOS ##
  UpdateEventLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: UpdateEventLambdaLogGroup
    Properties:
      FunctionName: 'UpdateEventLambda'
      Handler: 'update_event_lambda.lambda_handler'
      Runtime: python3.12
      Code:
        S3Bucket: !Sub "lambda-code-${AWS::AccountId}-${AWS::Region}-${Environment}"
        S3Key: "scripts_aplication/update_event_lambda.py.zip"
      MemorySize: 128
      Timeout: 20
      Role: !GetAtt UpdateEventLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTableName
          REGION: !Ref 'AWS::Region'
          LOG_LEVEL: "INFO"

Outputs:
  LambdaName:
    Description: Nombre de la función Lambda
    Value: !Ref EventLambdaFunction

  LambdaArn:
    Description: ARN de la función Lambda
    Value: !GetAtt EventLambdaFunction.Arn

  LogGroupName:
    Description: Log group de CloudWatch
    Value: "/aws/lambda/EventLambda"

  CodeBucket:
    Description: Bucket de código Lambda
    Value: !Sub "lambda-code-${AWS::AccountId}-${AWS::Region}-${Environment}"

  UpdateLambdaArn:
    Description: ARN de la función Lambda de actualización
    Value: !GetAtt UpdateEventLambdaFunction.Arn 
