AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Crea una Lambda para el microservicio de event

Parameters:
  Environment:
    Type: String
    Description: "Texto adicional para el nombre del bucket (ej: dev, qc, pdn)"
    Default: "dev"
    AllowedValues: ["dev", "qc", "pdn"]

  EventTableName:
    Type: String
    Description: "Nombre de la tabla DynamoDB (ej: EventTable)"
    Default: "EventTable"

Resources:

  EventLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EventLambdaModificationPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permisos de logging
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/EventLambda:*"

              # Permisos de DynamoDB sobre la tabla e índices
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:GetItem'        
                  - 'dynamodb:DescribeTable'
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EventTableName}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EventTableName}/index/*"

              # Permisos para crear y gestionar schedules de EventBridge Scheduler
              - Effect: 'Allow'
                Action:
                  - 'scheduler:CreateSchedule'
                  - 'scheduler:DeleteSchedule'
                  - 'scheduler:GetSchedule'
                  - 'scheduler:ListSchedules'
                Resource: '*'

              # Permiso para pasar un Role que EventBridge usará para invocar la Lambda B
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/EventBridgeSchedulerInvokeLambdaRole"

  EventLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: "/aws/lambda/EventLambda"
      RetentionInDays: 30

  EventLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: EventLambdaLogGroup
    Properties:
      FunctionName: 'EventLambda'
      Handler: 'events_lambda.lambda_handler'
      Runtime: python3.12
      Code:
        S3Bucket: !Sub "lambda-code-${AWS::AccountId}-${AWS::Region}-${Environment}"
        S3Key: "scripts_aplication/events_lamb
